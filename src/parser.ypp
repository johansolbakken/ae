%{
    #include <iostream>
    #include "tree.hpp"
    extern Node* root;
    extern char yytext[];
    extern int yylex();
    extern int yyerror(const char *error);
    extern int yylineno;
%}

%token IDENTIFIER IF ELSE WHILE
%token VOID BOOL I8 I16 I32 I64 U8 U16 U32 U64 F32 F64
%token INT_LITERAL STRING_LITERAL FLOAT_LITERAL
%token PRINTLN RETURN PRINT

%left '|' '&' '^'
%left '+' '-'
%left '*' '/'
%nonassoc UMINUS
%right '~'
//%expect 1

%nonassoc IF THEN
%nonassoc ELSE

%%

program : 
    global_list {
        auto node = make_node(NodeType::PROGRAM, {
            get_node($1)
        }, "");
        node->line = yylineno;
        root = node;
    };

global_list : 
    global_list global {
        auto node = make_node(NodeType::GLOBAL_LIST, {
            get_node($1),
            get_node($2)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | global {
        auto node = make_node(NodeType::GLOBAL_LIST, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    };

global : 
    function {
        auto node = make_node(NodeType::GLOBAL, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    };

function :
    type identifier '(' ')' '{' block '}' {
        auto node = make_node(NodeType::FUNCTION, {
            get_node($1),
            get_node($2),
            get_node($6)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    };

type :
    basic_type {
        auto node = make_node(NodeType::TYPE, {}, "");
        node->line = yylineno;
        $$ = store_node(node);
    }

basic_type :
    VOID {
        auto node = make_node(NodeType::BASIC_TYPE, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | BOOL {
        auto node = make_node(NodeType::BASIC_TYPE, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | I8 {
        auto node = make_node(NodeType::BASIC_TYPE, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | I16 {
        auto node = make_node(NodeType::BASIC_TYPE, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | I32 {
        auto node = make_node(NodeType::BASIC_TYPE, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | I64 {
        auto node = make_node(NodeType::BASIC_TYPE, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | U8 {
        auto node = make_node(NodeType::BASIC_TYPE, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | U16 {
        auto node = make_node(NodeType::BASIC_TYPE, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | U32 {
        auto node = make_node(NodeType::BASIC_TYPE, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | U64 {
        auto node = make_node(NodeType::BASIC_TYPE, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | F32 {
        auto node = make_node(NodeType::BASIC_TYPE, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | F64 {
        auto node = make_node(NodeType::BASIC_TYPE, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }


block : 
    statement_list {
        auto node = make_node(NodeType::BLOCK, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    };

statement_list : 
    statement_list statement {
        auto node = make_node(NodeType::STATEMENT_LIST, {
            get_node($1),
            get_node($2)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | statement {
        auto node = make_node(NodeType::STATEMENT_LIST, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    };


statement : 
    print_statement ';' {
        auto node = make_node(NodeType::STATEMENT, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | return_statement ';' {
        auto node = make_node(NodeType::STATEMENT, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | declaration ';' {
        auto node = make_node(NodeType::STATEMENT, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | assignment_statement ';' {
         auto node = make_node(NodeType::STATEMENT, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | call_statement ';' {
        auto node = make_node(NodeType::STATEMENT, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | if_statement {
        auto node = make_node(NodeType::STATEMENT, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    } 
    | while_statement {
        auto node = make_node(NodeType::STATEMENT, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    };


print_statement : 
    PRINT '(' expression ')' {
        auto node = make_node(NodeType::PRINT_STATEMENT, {
            get_node($3)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | PRINTLN '(' expression ')' {
        auto node = make_node(NodeType::PRINT_STATEMENT, {
            get_node($3)
        }, "\n");
        node->line = yylineno;
        $$ = store_node(node);
    };


return_statement : 
    RETURN expression {
        auto node = make_node(NodeType::RETURN_STATEMENT, {
            get_node($2)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    };

declaration : 
    type identifier '=' expression {
        auto node = make_node(NodeType::DECLARATION, {
            get_node($1),
            get_node($2),
            get_node($4)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    };

assignment_statement : 
    identifier '=' expression {
         auto node = make_node(NodeType::ASSIGNMENT_STATEMENT, {
            get_node($1),
            get_node($3)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | '*' expression '=' expression {
        auto node = make_node(NodeType::ASSIGNMENT_STATEMENT, {
            get_node($2),
            get_node($4)
        }, "*");
        node->line = yylineno;
        $$ = store_node(node);
    };

call_statement : 
    identifier '(' ')' {
        auto node = make_node(NodeType::CALL_STATEMENT, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    };

if_statement :
    IF '(' condition ')' '{' statement_list '}' ELSE '{' statement_list '}' {
        auto node = make_node(NodeType::IF_STATEMENT, {
            get_node($3),
            get_node($6),
            get_node($10)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | IF '(' condition ')' '{' statement_list '}' {
        auto node = make_node(NodeType::IF_STATEMENT, {
            get_node($3),
            get_node($6)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    };

while_statement:
    WHILE '(' condition ')' '{' statement_list '}' {
         auto node = make_node(NodeType::WHILE_STATEMENT, {
            get_node($3),
            get_node($6)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }

condition : 
    expression '<' expression {
        auto node = make_node(NodeType::CONDITION, {
            get_node($1),
            get_node($3)
        }, "<");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | expression '>' expression {
        auto node = make_node(NodeType::CONDITION, {
            get_node($1),
            get_node($3)
        }, ">");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | expression '=''=' expression {
        auto node = make_node(NodeType::CONDITION, {
            get_node($1),
            get_node($4)
        }, "==");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | expression '!''=' expression {
        auto node = make_node(NodeType::CONDITION, {
            get_node($1),
            get_node($4)
        }, "!=");
        node->line = yylineno;
        $$ = store_node(node);
    };

expression :
    expression '+' expression {
        auto node = make_node(NodeType::EXPRESSION,
        {
            get_node($1),
            get_node($3)
        }, 
        "+");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | expression '-' expression {
        auto node = make_node(NodeType::EXPRESSION,
        {
            get_node($1),
            get_node($3)
        }, 
        "-");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | expression '/' expression {
        auto node = make_node(NodeType::EXPRESSION,
        {
            get_node($1),
            get_node($3)
        }, 
        "/");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | expression '*' expression {
        auto node = make_node(NodeType::EXPRESSION,
        {
            get_node($1),
            get_node($3)
        }, 
        "*");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | '-' expression {
         auto node = make_node(NodeType::EXPRESSION,
        {
            get_node($2)
        }, 
        "-");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | '*' expression {
    auto node = make_node(NodeType::EXPRESSION,
        {
            get_node($2)
        }, 
        "*");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | '&' expression {
        auto node = make_node(NodeType::EXPRESSION,
        {
            get_node($2)
        }, 
        "&");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | '(' expression ')'{
        auto node = make_node(NodeType::EXPRESSION,
        {
            get_node($2)
        }, 
        "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | call_statement {
        auto node = make_node(NodeType::EXPRESSION, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | string_data {
        auto node = make_node(NodeType::EXPRESSION, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | int_data {
        auto node = make_node(NodeType::EXPRESSION, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    } 
    | float_data {
        auto node = make_node(NodeType::EXPRESSION, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }
    | identifier {
        auto node = make_node(NodeType::EXPRESSION, {
            get_node($1)
        }, "");
        node->line = yylineno;
        $$ = store_node(node);
    }

string_data : 
    STRING_LITERAL {
        auto node = make_node(NodeType::STRING_DATA, {}, std::string(yytext));
        node->line = yylineno;
        $$ = store_node(node);
    };


int_data : 
    INT_LITERAL {
        auto node = make_node(NodeType::INT_DATA, {}, std::string(yytext));
        node->line = yylineno;
        $$ = store_node(node);
    };

float_data :
    FLOAT_LITERAL {
        auto node = make_node(NodeType::FLOAT_DATA, {}, std::string(yytext));
        node->line = yylineno;
        $$ = store_node(node);
    };

identifier :
    IDENTIFIER {
        auto node = make_node(NodeType::IDENTIFIER_DATA, {}, std::string(yytext));
        node->line = yylineno;
        $$ = store_node(node);
    }


%%

int yyerror(const char* error) {
    std::cout << error << " on line " << yylineno << std::endl;
    exit(EXIT_FAILURE);
}